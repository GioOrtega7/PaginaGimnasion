# Generated by Django 4.2.1 on 2023-07-25 23:19

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
                ('foto', models.ImageField(upload_to='img/')),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Cargo',
            fields=[
                ('idcargo', models.IntegerField(db_comment='sirve para identificar la tabla de cargo ', primary_key=True, serialize=False)),
                ('nombre', models.CharField(blank=True, db_comment='sirve para guardar el nombre del cargo ', max_length=45, null=True)),
            ],
            options={
                'db_table': 'cargo',
                'db_table_comment': 'esta tabla sirve para guardar todos loa cargos',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Cita',
            fields=[
                ('idcita', models.IntegerField(primary_key=True, serialize=False)),
                ('horacita', models.IntegerField(blank=True, db_comment='sirve para guardar la hora de la cita ', null=True)),
                ('fecha', models.IntegerField(blank=True, db_comment='sirve para guardar la fecha de la cita ', null=True)),
                ('notas', models.CharField(blank=True, db_comment='sirve para guardar las notas de la cita', max_length=45, null=True)),
            ],
            options={
                'db_table': 'cita',
                'db_table_comment': 'sirve para guardar las citas ',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dia',
            fields=[
                ('iddia', models.IntegerField(primary_key=True, serialize=False)),
                ('dia', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'dia',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dieta',
            fields=[
                ('iddieta', models.IntegerField(primary_key=True, serialize=False)),
                ('idempleado', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'dieta',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ejercicio',
            fields=[
                ('idejercicio', models.IntegerField(db_comment='sirve para identificar la tabla de los ejercicios ', primary_key=True, serialize=False)),
                ('nombre', models.CharField(blank=True, db_comment='sirve para guardar el nombre de los ejercicios ', max_length=45, null=True)),
                ('imagen', models.ImageField(upload_to='img/')),
            ],
            options={
                'db_table': 'ejercicio',
                'db_table_comment': 'sirve para guardar los ejercicios ',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Enfoque',
            fields=[
                ('idenfoque', models.IntegerField(db_comment='sirve para identificar la tabla de enfoques ', primary_key=True, serialize=False)),
                ('nombre', models.CharField(blank=True, db_comment='sirve para guardar el nombre del enfoque ', max_length=45, null=True)),
            ],
            options={
                'db_table': 'enfoque',
                'db_table_comment': 'sirve para  guardar los enfoques de las personas',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Estado',
            fields=[
                ('idestado', models.IntegerField(db_comment='sirve para identificar la tabla de estado', primary_key=True, serialize=False)),
                ('estado', models.CharField(blank=True, db_comment='sirve para guardar los estados ', max_length=45, null=True)),
            ],
            options={
                'db_table': 'estado',
                'db_table_comment': 'esta tabla guarda los estados ',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Evolucion',
            fields=[
                ('idevolucion', models.IntegerField(db_comment='sirve para identificar la tabla de evoluciones ', primary_key=True, serialize=False)),
                ('fecha', models.CharField(blank=True, db_comment='sirve para guardar las fechas de las evoluciones ', max_length=45, null=True)),
            ],
            options={
                'db_table': 'evolucion',
                'db_table_comment': 'sirve para guardar las evoluciones ',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Genero',
            fields=[
                ('idgenero', models.IntegerField(db_comment='este campo nos ayuda a registrar los generos', primary_key=True, serialize=False)),
                ('nombre', models.CharField(blank=True, db_comment='este campo nos ayuda a distinguir los generos ', max_length=45, null=True)),
            ],
            options={
                'db_table': 'genero',
                'db_table_comment': 'esta tabla ayuda a guardar los generos',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Historia',
            fields=[
                ('idhistoria', models.IntegerField(db_comment='nos ayuda a ver como esta de salud la persona', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'historia',
                'db_table_comment': 'esta sirve para registrar los diferentes estpas de la persona',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Horario',
            fields=[
                ('idhorario', models.IntegerField(db_comment='sirve para identificar las tablas de las personas ', primary_key=True, serialize=False)),
                ('fecha', models.CharField(blank=True, db_comment='sirve para guardar la fecha de los horarios ', max_length=45, null=True)),
                ('horainicio', models.CharField(blank=True, db_comment='sirve para guardar la hora de inicio ', max_length=45, null=True)),
                ('horafin', models.CharField(blank=True, db_comment='sirve para guardarla hora final del horario ', max_length=45, null=True)),
            ],
            options={
                'db_table': 'horario',
                'db_table_comment': 'sirve para guardar los horarios ',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ingrediente',
            fields=[
                ('idingrediente', models.IntegerField(primary_key=True, serialize=False)),
                ('nombre', models.CharField(blank=True, db_comment='sirve para guardar el nombre de los ingredientes ', max_length=45, null=True)),
                ('racion', models.IntegerField(db_comment='sirve para guardar la racion de los alimentos ')),
                ('ingredientescol', models.CharField(blank=True, db_comment='sirve para guardar el ingrediente', max_length=45, null=True)),
                ('proteinas', models.FloatField(blank=True, db_comment='sirve para guardar las proteinas de los alimentos', null=True)),
                ('carbohidratos', models.FloatField(blank=True, db_comment='irven para guardar los carbohidratos de los alimentos ', null=True)),
                ('calorias', models.FloatField(blank=True, db_comment='sirve para guardar las calorias de los alimentos ', null=True)),
                ('grasas', models.FloatField(blank=True, db_comment='sirve para guardar la grasa de los alimentos ', null=True)),
            ],
            options={
                'db_table': 'ingrediente',
                'db_table_comment': 'sirve para guardar los ingredientes ',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Medida',
            fields=[
                ('idmedida', models.IntegerField(db_comment='sirve para darle una identidad a la tabla', primary_key=True, serialize=False)),
                ('estatura', models.FloatField(blank=True, db_comment='sirve para tener unas medidas de la persona', null=True)),
                ('peso', models.FloatField(blank=True, db_comment='sirve para guardar los  diferentes pesos', null=True)),
                ('indicegrasa', models.IntegerField(blank=True, db_comment='sirve para guardar todos los indiices de grasas en las personas', null=True)),
                ('imc', models.FloatField(blank=True, db_column='IMC', db_comment='sirve para guardar todos los imc de las personas ', null=True)),
            ],
            options={
                'db_table': 'medida',
                'db_table_comment': 'sirve para registrar todas las medidas de los usuarios ',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Metodopago',
            fields=[
                ('idmetodopago', models.IntegerField(db_comment='sirve para identificar la tabla de metdo de pago', primary_key=True, serialize=False)),
                ('metodo', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'metodopago',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ocupacion',
            fields=[
                ('idocupacion', models.IntegerField(db_comment='sirve para identificar las tabla de ocupacion ', primary_key=True, serialize=False)),
                ('nombre', models.CharField(blank=True, db_comment='sirve para distinguir los cargos y guardarlos ', max_length=45, null=True)),
            ],
            options={
                'db_table': 'ocupacion',
                'db_table_comment': 'sirve para guardar las ocupaciones ',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Pago',
            fields=[
                ('idpago', models.IntegerField(db_comment='sirve para registrar la tabla de pagos', primary_key=True, serialize=False)),
                ('fechapago', models.CharField(blank=True, db_comment='sirve para guardar la fecha de pagos', max_length=45, null=True)),
                ('montopagado', models.FloatField(blank=True, db_comment='sirve para guardar el monto de los pagos', null=True)),
            ],
            options={
                'db_table': 'pago',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Pagos',
            fields=[
                ('idpago', models.IntegerField(db_comment='sirve para identificar las tablas de pagos ', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pagos',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Persona',
            fields=[
                ('idpersona', models.IntegerField(db_comment='sirve par identificar mas facilmente la tabla', primary_key=True, serialize=False)),
                ('nombre1', models.CharField(blank=True, db_comment='sirve para guardar el primer nombre ', max_length=45, null=True)),
                ('nombre2', models.CharField(blank=True, db_comment='sirve para guardar el segundo nombre de la persona ', max_length=45, null=True)),
                ('apellido1', models.CharField(blank=True, db_comment='sirve para guardar el primer apellido ', max_length=45, null=True)),
                ('apellido2', models.CharField(blank=True, db_comment='sirve para guardar el segundo apellido de la persona', max_length=45, null=True)),
                ('numid', models.CharField(blank=True, db_comment='sirve para registrar a las personas ', max_length=45, null=True)),
                ('edad', models.IntegerField(blank=True, db_comment='sirve para guarda la edad de las personas ', null=True)),
                ('email', models.CharField(blank=True, db_comment='sirve para guardar  el contacto de las personas', max_length=45, null=True)),
                ('celular', models.IntegerField(blank=True, db_comment='sirve para tener un registro del contacto de las personas ', null=True)),
                ('direccion', models.IntegerField(blank=True, db_comment='sirve para guardar la direccion de las personas ', null=True)),
            ],
            options={
                'db_table': 'persona',
                'db_table_comment': 'esta tabla registra a las personas ademas almacena los datos',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('idmembresia', models.IntegerField(db_comment='sirve para identificar la tabla de membresia ', primary_key=True, serialize=False)),
                ('fechainicio', models.DateField(blank=True, db_comment='sirve par guardar la fecha de inicio ', null=True)),
                ('fechafin', models.DateField(blank=True, db_comment='sirve para guardar la fecha del fin', null=True)),
                ('foto', models.CharField(max_length=45)),
            ],
            options={
                'db_table': 'plan',
                'db_table_comment': 'sirve para guardar los planes que hay en el gimnasio ',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Planificacion',
            fields=[
                ('idplanificacion', models.IntegerField(db_comment='sirve para identificar la tabla de planificacion ', primary_key=True, serialize=False)),
                ('cantidad', models.IntegerField(blank=True, db_comment='sirve para guardar la cantidad indicada ', null=True)),
            ],
            options={
                'db_table': 'planificacion',
                'db_table_comment': 'sirve para guardar las planificaciones de cada persona ',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Receta',
            fields=[
                ('idreceta', models.IntegerField(db_comment='sirve para identificar la tabla de recetas ', primary_key=True, serialize=False)),
                ('imagen', models.CharField(blank=True, db_comment='sirve para guardar las imagenes de las recetas ', max_length=45, null=True)),
                ('preparacion', models.CharField(blank=True, db_comment='sirve para guardar las preparaciones de las recetas ', max_length=45, null=True)),
                ('carbohidratos', models.FloatField(blank=True, db_comment='sirve para guardar las ganancias de carbohidratos en el cuerpo', null=True)),
                ('calorias', models.FloatField(db_comment='sirve para guardar el registro de calorias de cada alimento')),
                ('grasas', models.FloatField(blank=True, db_comment='sirve para guardar el indice de grasas de cada alimento', null=True)),
            ],
            options={
                'db_table': 'receta',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Repeticion',
            fields=[
                ('idrepeticion', models.IntegerField(primary_key=True, serialize=False)),
                ('cantidad', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'repeticion',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Rutina',
            fields=[
                ('idrutina', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'rutina',
                'db_table_comment': 'sirve para guardar las rutinas ',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Serie',
            fields=[
                ('idserie', models.IntegerField(db_comment='sirve para identificar la tabla de series ', primary_key=True, serialize=False)),
                ('cantidad', models.CharField(blank=True, db_comment='sirve para guardarr la cantidad de las series ', max_length=45, null=True)),
            ],
            options={
                'db_table': 'serie',
                'db_table_comment': 'sirve para guardar las series de los ejercicios',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tipoalimento',
            fields=[
                ('idtipoalimento', models.IntegerField(db_comment='sirve para identificar la tabla de tipo de alimento', primary_key=True, serialize=False)),
                ('nombre', models.CharField(blank=True, db_comment='sirve para guardar el nombre de los tipos de alimentos', max_length=45, null=True)),
                ('descripcion', models.CharField(blank=True, db_comment='sirve para dar una informacion pequeña de los productos ', max_length=45, null=True)),
                ('verduras', models.CharField(blank=True, db_comment='sirve como tipo de alimentos', max_length=45, null=True)),
                ('granos', models.CharField(blank=True, db_comment='sirve como tipo de alimentos', max_length=45, null=True)),
                ('ensaladas', models.CharField(blank=True, db_comment='sirve como tipo de alimentos', max_length=45, null=True)),
                ('bebidas', models.CharField(blank=True, db_comment='sirve como tipo de bebidas', max_length=45, null=True)),
                ('frutas', models.CharField(blank=True, db_comment='sirve como tipo de frutas', max_length=45, null=True)),
            ],
            options={
                'db_table': 'tipoalimento',
                'db_table_comment': 'sirve guardar el tipo de alimentos ',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tipocomida',
            fields=[
                ('idtipocomida', models.IntegerField(db_comment='sirve para identificar la tabla de comidas ', primary_key=True, serialize=False)),
                ('nombre', models.CharField(blank=True, db_comment='sirve para guardar el nombre de las comidas ', max_length=45, null=True)),
                ('descripcion', models.CharField(blank=True, db_comment='sirve para dar una pequeña informacion de la comida ', max_length=45, null=True)),
                ('desayuno', models.CharField(blank=True, db_comment='sirve para guardar las comidas que sean de desayuno', max_length=45, null=True)),
                ('almuerzo', models.CharField(blank=True, db_comment='sirve para guardar las comidas que sean del almuerzo ', max_length=45, null=True)),
                ('mediatarde', models.CharField(blank=True, db_comment='sirve para guardar las comidas que se comen en la tarde ', max_length=45, null=True)),
                ('cena', models.CharField(blank=True, db_comment='sirve para guardar las comidas que se sirven en la noche ', max_length=45, null=True)),
                ('entrenoche', models.CharField(blank=True, db_comment='sirve para guardar las comidas que se sirvan en la noche ', max_length=45, null=True)),
            ],
            options={
                'db_table': 'tipocomida',
                'db_table_comment': 'sirve para guardar los diferentes tipos de comidas ',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tipodocumento',
            fields=[
                ('idtipodocumento', models.IntegerField(db_comment='sirve para indentificar la tabla de documento', primary_key=True, serialize=False)),
                ('tipodoc', models.CharField(blank=True, db_comment='sirve para guardar el tipo de documento que tiene la persona ', max_length=45, null=True)),
            ],
            options={
                'db_table': 'tipodocumento',
                'db_table_comment': 'sirve para guardar el documento de las personas ',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tipopersona',
            fields=[
                ('idtipopersona', models.IntegerField(db_comment='sirve para identificar la tabla de tipo de persona ', primary_key=True, serialize=False)),
                ('nombre', models.CharField(blank=True, db_comment='sirve para guardar el nombre del tipo de la persona', max_length=45, null=True)),
            ],
            options={
                'db_table': 'tipopersona',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tipoplan',
            fields=[
                ('idtipoplan', models.IntegerField(primary_key=True, serialize=False)),
                ('nombre', models.CharField(blank=True, db_comment='sirve para guardar el nombre de los planes', max_length=45, null=True)),
                ('precio', models.CharField(blank=True, db_comment='sirve para guardar el precio de los planes ', max_length=45, null=True)),
                ('foto', models.ImageField(upload_to='img/')),
            ],
            options={
                'db_table': 'tipoplan',
                'db_table_comment': 'sirve para guardar los tipos de planes que hay en el gimnasio ',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('idusuario', models.IntegerField(primary_key=True, serialize=False)),
                ('nombre', models.CharField(blank=True, db_comment='nos sirve para guardar el nombre de la persona ', max_length=45, null=True)),
                ('clave', models.CharField(blank=True, db_comment='sirve para guardar las claves de las personas y asi agregarle seguridad', max_length=45, null=True)),
            ],
            options={
                'db_table': 'usuario',
                'db_table_comment': 'sirve para guardar los datos de usarios ',
                'managed': False,
            },
        ),
    ]
